#!/usr/bin/env python3

from pathlib import Path
from snakemake.logging import logger


#############
# FUNCTIONS #
#############


def get_paragone_input(wildcards):
    input_dict = {"paralog_sequences": paralog_sequences}
    try:
        input_dict["external_outgroups"] = external_outgroups
    except NameError:
        pass
    logger.debug(input_dict)
    return input_dict


def get_paragone_params(wildcards, input, output):
    param_dict = {}
    try:
        eo_path = Path(input.external_outgroups)
        param_dict["external_outgroups"] = (
            f"--external_outgroups_file {eo_path} "
        )
    except AttributeError:
        param_dict["external_outgroups"] = ""
    try:
        param_dict["internal_outgroup"] = (
            f"--internal_outgroup {internal_outgroup} "
        )
    except NameError:
        param_dict["internal_outgroup"] = ""
    logger.debug(param_dict)
    return param_dict


###########
# GLOBALS #
###########

logger.info("Paragone smk-module")

# containers
paragone = "docker://quay.io/biocontainers/paragone:1.0.0--pl5321h031d066_0"
pigz = "docker://quay.io/biocontainers/pigz:2.3.4"

# catch input
paralog_sequences = config["paralog_sequences"]
logger.debug(f"paralog_sequences {paralog_sequences}")

try:
    external_outgroups = config["external_outgroups"]
    logger.debug(f"external_outgroups {external_outgroups}")
except KeyError as e:
    logger.warning("external_outgroups not set")

try:
    internal_outgroup = config["internal_outgroup"]
    logger.debug(f"internal_outgroup {internal_outgroup}")
except KeyError as e:
    logger.warning("internal_outgroup not set")

try:
    pool = config["pool"]
    logger.debug(f"pool {pool}")
except KeyError as e:
    logger.warning("pool not set, using 1")
    pool = 1

# set up directories
outdir = Path(config["outdir"] if "outdir" in config else ".")
logger.debug(f"outdir: {outdir}")
logdir = Path(outdir, "logs")

paragone_directory = Path(outdir, "paragone")

alignment_directories = [
    Path(outdir, x)
    for x in [
        "26_MO_final_alignments_trimmed",
        "27_MI_final_alignments_trimmed",
        "28_RT_final_alignments_trimmed",
    ]
]

catch_output = (
    "mv 00_logs_and_reports {rule}/ ; "
    "find . -maxdepth 1 -mindepth 1 -newer start_time ! -name {rule} "
    "-exec mv {{}} {rule}/ \; ; "
    "tar -cf {output.tarfile} "
    "--directory {rule} . "
)

prepare_input = (
    "for tarfile in {input.tarfiles} ; "
    'do tar --strip-components=1 -xf "${{tarfile}}" ; done ; '
    "mkdir {rule} ; touch start_time "
)


#########
# RULES #
#########


rule target:
    input:
        Path(outdir, "intermediate_files.tar.gz"),
        alignment_directories,


rule collect_paragone_intermediate_files:
    input:
        tarfiles=[
            Path(paragone_directory, "align_selected_and_tree.tar"),
            Path(paragone_directory, "alignment_to_tree.tar"),
            Path(paragone_directory, "check_and_align.tar"),
            Path(paragone_directory, "prune_paralogs.tar"),
            Path(paragone_directory, "qc_trees_and_extract_fasta.tar"),
        ],
        # this goes last because it's got the logs and reports
        final_alignments=Path(paragone_directory, "final_alignments.tar"),
    output:
        Path(outdir, "intermediate_files.tar.gz"),
    log:
        Path(logdir, "collect_paragone_intermediate_files.log"),
    threads: workflow.cores
    resources:
        mem_mb=lambda wildcards, attempt: 8e3 * attempt,
        time=lambda wildcards, attempt: 10 * attempt,
    shadow:
        "minimal"
    container:
        pigz
    shell:
        "mkdir {rule} ; "
        "for tarfile in {input.tarfiles} ; "
        'do tar -xf "${{tarfile}}" -C {rule} ; done ; '
        "tar -xf {input.final_alignments} -C {rule} ; "
        "tar --directory {rule} -c . | pigz -p {threads} -9 >{output}"


rule collect_alignments:
    input:
        tarfile=Path(paragone_directory, "final_alignments.tar"),
    output:
        [directory(x) for x in alignment_directories],
    params:
        outdir=lambda wildcards, output: Path(output[0]).parent,
    resources:
        mem_mb=lambda wildcards, attempt: 8e3 * attempt,
        time=lambda wildcards, attempt: 10 * attempt,
    shadow:
        "minimal"
    container:
        pigz
    shell:
        "tar -xf {input.tarfile} "
        "-C {params.outdir} "


rule final_alignments:
    input:
        tarfiles=[
            Path(paragone_directory, "prune_paralogs.tar"),
            Path(paragone_directory, "align_selected_and_tree.tar"),
        ],
    output:
        tarfile=temp(Path(paragone_directory, "final_alignments.tar")),
    params:
        threads=lambda wildcards, threads: threads // pool,
    log:
        Path(logdir, "final_alignments.log"),
    threads: workflow.cores
    resources:
        mem_mb=lambda wildcards, attempt: 8e3 * attempt,
        time=lambda wildcards, attempt: 30 * attempt,
    shadow:
        "minimal"
    container:
        paragone
    shell:
        f"{prepare_input} ; "
        "paragone final_alignments "
        "--mo --rt --mi "
        "--pool " + str(pool) + " "
        "--threads {params.threads} "
        "--keep_intermediate_files "
        "&> {log} ; "
        f"{catch_output}"


rule prune_paralogs:
    input:
        tarfiles=Path(paragone_directory, "align_selected_and_tree.tar"),
    output:
        tarfile=temp(Path(paragone_directory, "prune_paralogs.tar")),
    log:
        Path(logdir, "prune_paralogs.log"),
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: 8e3 * attempt,
        time=lambda wildcards, attempt: 30 * attempt,
    shadow:
        "minimal"
    container:
        paragone
    shell:
        f"{prepare_input} ; "
        "paragone "
        "prune_paralogs "
        "--mo --rt --mi "
        "&> {log} ; "
        f"{catch_output}"


rule align_selected_and_tree:
    input:
        tarfiles=[
            Path(paragone_directory, "check_and_align.tar"),
            Path(paragone_directory, "qc_trees_and_extract_fasta.tar"),
        ],
    output:
        tarfile=temp(Path(paragone_directory, "align_selected_and_tree.tar")),
    params:
        threads=lambda wildcards, threads: threads // pool,
    log:
        Path(logdir, "align_selected_and_tree.log"),
    threads: workflow.cores
    resources:
        mem_mb=lambda wildcards, attempt: 8e3 * attempt,
        time=lambda wildcards, attempt: 30 * attempt,
    shadow:
        "minimal"
    container:
        paragone
    shell:
        f"{prepare_input} ; "
        "touch start_time ; "
        "paragone "
        "align_selected_and_tree 04_alignments_trimmed_hmmcleaned "
        "--use_fasttree "
        "--pool " + str(pool) + " "
        "--threads {params.threads} "
        "&> {log} ; "
        f"{catch_output}"


rule qc_trees_and_extract_fasta:
    input:
        tarfiles=[
            Path(paragone_directory, "check_and_align.tar"),
            Path(paragone_directory, "alignment_to_tree.tar"),
        ],
    output:
        tarfile=temp(
            Path(paragone_directory, "qc_trees_and_extract_fasta.tar")
        ),
    log:
        Path(logdir, "qc_trees_and_extract_fasta.log"),
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: 8e3 * attempt,
        time=lambda wildcards, attempt: 30 * attempt,
    shadow:
        "minimal"
    container:
        paragone
    shell:
        f"{prepare_input} ; "
        "paragone "
        "qc_trees_and_extract_fasta "
        "--treeshrink_q_value 0.20 "
        "--cut_deep_paralogs_internal_branch_length_cutoff 0.04 "
        "04_alignments_trimmed_hmmcleaned "
        "&> {log} ; "
        f"{catch_output}"


rule alignment_to_tree:
    input:
        tarfiles=Path(paragone_directory, "check_and_align.tar"),
    output:
        tarfile=temp(Path(paragone_directory, "alignment_to_tree.tar")),
    params:
        threads=lambda wildcards, threads: threads // pool,
    log:
        Path(logdir, "alignment_to_tree.log"),
    threads: workflow.cores
    resources:
        mem_mb=lambda wildcards, attempt: 8e3 * attempt,
        time=lambda wildcards, attempt: 30 * attempt,
    shadow:
        "minimal"
    container:
        paragone
    shell:
        f"{prepare_input} ; "
        "paragone "
        "alignment_to_tree 04_alignments_trimmed_hmmcleaned "
        "--use_fasttree "
        "--pool " + str(pool) + " "
        "--threads {params.threads} "
        "&> {log} ; "
        f"{catch_output}"


rule check_and_align:
    input:
        unpack(get_paragone_input),
    output:
        tarfile=temp(Path(paragone_directory, "check_and_align.tar")),
    params:
        get_paragone_params,
        threads=lambda wildcards, threads: threads // pool,
    log:
        Path(logdir, "check_and_align.log"),
    threads: workflow.cores
    resources:
        mem_mb=lambda wildcards, attempt: 8e3 * attempt,
        time=lambda wildcards, attempt: 30 * attempt,
    shadow:
        "minimal"
    container:
        paragone
    shell:
        "mkdir {rule} ; touch start_time ; "
        "paragone "
        "check_and_align {input.paralog_sequences} "
        "{params[0][external_outgroups]} "
        "{params[0][internal_outgroup]} "
        "--pool " + str(pool) + " "
        "--threads {params.threads} "
        "&> {log} ; "
        f"{catch_output}"
