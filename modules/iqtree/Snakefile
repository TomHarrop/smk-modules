import tempfile
from snakemake.logging import logger
from functools import cache


###########
# GLOBALS #
###########

# containers
iqtree = "docker://quay.io/biocontainers/iqtree:2.3.5--hdcf5f25_0"
biopython = "docker://quay.io/biocontainers/biopython:1.81"

# set up directories
outdir = Path(config["outdir"] if "outdir" in config else ".")
logger.debug(f"outdir: {outdir}")
logdir = Path(outdir, "logs")


# catch alignmnt directory
alignment_directory = f"{config['alignment_directory']}"
logger.debug(f"Caught alignment_directory: {alignment_directory}")


rule target:
    input:
        Path(outdir, "iqtree_files.tar"),
        multiext(
            Path(
                outdir,
                "tree",
            ).as_posix(),
            ".iqtree",
            ".log",
            ".treefile",
        ),


rule iqtree:
    input:
        alignments=Path(
            outdir,
            "inputs.tar",
        ),
        partition_file=Path(
            outdir,
            "partitions.nexus",
        ),
    output:
        multiext(
            Path(
                outdir,
                "tree",
            ).as_posix(),
            ".iqtree",
            ".log",
            ".treefile",
        ),
        tarfile=Path(outdir, "iqtree_files.tar"),
    params:
        seed=14,
        outdir=f"{outdir}",
    log:
        Path(logdir, "iqtree.log"),
    resources:
        mem_mb=lambda wildcards, attempt: int(32e3 * attempt),
        time="7-00",
    threads: lambda wildcards, attempt: 48 * attempt
    shadow:
        "minimal"
    container:
        iqtree
    shell:
        "mkdir input_alignments ; "
        "tar -xf {input.alignments} -C input_alignments/ ; "
        "iqtree "
        "--prefix tree "
        "-alrt 1000 "
        "-m MFP "
        "-nt AUTO -ntmax {threads} "
        "-p {input.partition_file} "
        "-s input_alignments "
        "-seed {params.seed} "
        "-wbtl "
        "&> {log} ; "
        "mkdir iqtree_files ; "
        "cp tree.* iqtree_files/ ; "
        "tar -cf {output.tarfile} --directory iqtree_files . ; "
        "mv tree.* {params.outdir}/"


rule generate_nexus_partition_file:
    input:
        alignment_directory=f"{alignment_directory}",
    output:
        nexus=Path(
            outdir,
            "partitions.nexus",
        ),
        excluded_samples=Path(
            outdir,
            "excluded_samples.txt",
        ),
        kept_alignments=temp(
            Path(
                outdir,
                "inputs.tar",
            )
        ),
    log:
        Path(
            logdir,
            "generate_nexus_partition_file.log",
        ),
    resources:
        mem_mb=int(4e3),
        time=lambda wildcards, attempt: 20 * attempt,
    threads: 1
    shadow:
        "minimal"
    container:
        biopython
    script:
        "scripts/generate_nexus_partition_file.py"
