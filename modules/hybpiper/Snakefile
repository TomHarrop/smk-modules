#!/usr/bin/env python3

import re
import tempfile


#############
# FUNCTIONS #
#############

def get_sample_input(wildcards):
    sample_name = wildcards.sample
    rd = Path(read_directory)
    sample_files = {
        'r1': [x for x in rd.glob(f'{sample_name}*.[rR]1.*')],
        'r2': [x for x in rd.glob(f'{sample_name}*.[rR]2.*')],
        'unpaired': [x for x in rd.glob(f'{sample_name}*.unpaired.*')]
    }
    for key in sample_files:
        # check for suspicious files
        if len(sample_files[key]) > 1:
            raise ValueError(
                f'Found more than one file for sample {sample_name}',
                f'{print(sample_files)}'
                )
        else:
            # unlise the single file
            sample_files[key] = sample_files[key][0].as_posix()
    return(sample_files)


def resolve_input(wildcards, input):
    output_dict = {}
    for key, value in input.items():
        try:
            output_dict[key] = Path(value).resolve()
        except TypeError as e:
            print(f'Warning: not trying to resolve {key}',
                  file=sys.stderr)
    return output_dict


def resolve_output(wildcards, output):
    output_dict = {}
    for key, value in output.items():
        try:
            output_dict[key] = Path(value).resolve()
        except TypeError as e:
            print(f'Warning: not trying to resolve {key}',
                  file=sys.stderr)
    return output_dict


def sample_name_sanitiser(sample_name):
    if re.compile('[^a-zA-Z0-9_-]').search(sample_name):
        raise ValueError(f'{sample_name} contains special character(s)')


###########
# GLOBALS #
###########

# containers
hybpiper = 'docker://quay.io/biocontainers/hybpiper:2.1.6--h031d066_0'
pigz = 'docker://quay.io/biocontainers/pigz:2.3.4'

# set up directories
outdir = Path(config['outdir'] if 'outdir' in config else '.')
print(f'outdir: {outdir}')
logdir = Path(outdir, 'logs')

# set up a temporary directory for this run
try:
    run_tmpdir = config['run_tmpdir']
    print(f'Caught run_tmpdir {run_tmpdir}')
except KeyError as e:
    print(f'{e} not set in config')
    run_tmpdir = tempfile.mkdtemp()
    print(f'Setting run_tmpdir to {run_tmpdir}')
    print('This probably won\'t work on a cluster!')

# catch samples
all_samples = sorted(set(config['sample_list']))
print('Caught sample list:')
print(all_samples)

# catch read directory
read_directory = config['read_directory']
print(f'Caught read_directory: {read_directory}')

# catch config
target_file = config['target_file']
print(f'Caught target_file: {target_file}')

# define outputs
namelist = Path(
    outdir,
    'namelist.txt'
    )

fixed_tf = Path(
    outdir,
    'target_file.fixed.fasta'
    )

# make sure nothing crazy happens with sample names
wildcard_constraints:
    sample = '|'.join(all_samples)


############
# WORKFLOW #
############

rule target:
    input:
        expand(
            Path(
                outdir,
                'sequences.{type}.tar.gz'
                ),
            type=['dna','aa','intron','supercontig']
            ),
        expand(
            Path(
                outdir,
                'hybpiper_stats.{type}.tsv'
                ),
            type=['gene', 'supercontig']
            )


# Need lots of files here, try to do it in the job tmp area provided to
# Snakemake (not the individual jobs). This needs to be passed as a config
# parameter to the call to snakemake, because TMPDIRs are interpreted at
# runtime. This would mean that worker nodes get a different run_tmpdir if
# tempfile.mkdtemp() is used in the Snakefile.
rule archive_hybpiper_sequences:
    input:
        folder = Path(
            run_tmpdir,
            'sequences.{type}'
            )
    output:
        tarfile = Path(
            outdir,
            'sequences.{type}.tar.gz'
            )
    params:
        resolve_output
    threads:
        lambda wildcards, attempt: 4 * attempt
    resources:
        time = lambda wildcards, attempt: 20 * attempt
    container:
        pigz
    shell:
        'cd {input.folder} || exit 1 '
        '&& '
        'tar -cf - . '
        '| pigz -p {threads} -9 '
        '> {params[0][tarfile]} '

rule hybpiper_retrieve_sequences:
    input:
        target = fixed_tf,
        namelist = namelist,
        sample_files = expand(
            Path(
                run_tmpdir,
                '{sample}'
                ),
            sample=all_samples
            ),
    output:
        fasta_dir = temporary(
            directory(
                Path(
                    run_tmpdir,
                    'sequences.{type}'
                    )
                )
            ),
    params:
        resolve_input,
        run_tmpdir = run_tmpdir
    log:
        Path(
            logdir,
            'retrieve_sequences.{type}.log').resolve()
    benchmark:
        Path(
            logdir,
            'retrieve_sequences.{type}.benchmark.log').resolve()
    resources:
        time = lambda wildcards, attempt: 120 * attempt,
    container:
        hybpiper
    shell:
        'cd {params.run_tmpdir} || exit 1 '
        '&& '
        'hybpiper retrieve_sequences '
        '--targetfile_dna {params[0][target]} '
        '--sample_names {params[0][namelist]} '
        '--fasta_dir sequences.{wildcards.type} '
        '{wildcards.type} '
        '&> {log} '


rule hybpiper_stats:
    input:
        target = fixed_tf,
        namelist = namelist,
        sample_files = expand(
            Path(
                run_tmpdir,
                '{sample}'
                ),
            sample=all_samples
            ),
    output:
        seq_lengths = Path(
            outdir,
            'seq_lengths.{type}.tsv'),
        stats = Path(
            outdir,
            'hybpiper_stats.{type}.tsv')
    params:
        resolve_input,
        resolve_output,
        parent = lambda wildcards, input:
            Path(input.sample_files[0]).resolve().parent,
    log:
        Path(
            logdir,
            'stats.{type}.log').resolve()
    benchmark:
        Path(
            logdir,
            'stats.{type}.benchmark.log').resolve()
    resources:
        time = lambda wildcards, attempt: 120 * attempt,
    container:
        hybpiper
    shell:
        'cd {params.parent} || exit 1 '
        '&& '
        'hybpiper stats '
        '--targetfile_dna {params[0][target]} '
        '--stats_filename hybpiper_stats.{wildcards.type} '
        '--seq_lengths_filename seq_lengths.{wildcards.type} '
        '{wildcards.type} '
        '{params[0][namelist]} '
        '&> {log} '
        '&& mv hybpiper_stats.{wildcards.type}.tsv {params[1][stats]} '
        '&& mv seq_lengths.{wildcards.type}.tsv {params[1][seq_lengths]} '

rule unarchive_hybpiper_results:
    input:
        tarfile = Path(
            outdir,
            'assemble',
            '{sample}.tar.gz'
            )
    output:
        folder = temporary(
            directory(
                Path(
                    run_tmpdir,
                    '{sample}'
                    )
                )
            )
    resources:
        time = lambda wildcards, attempt: 20 * attempt,
    container:
        hybpiper
    shell:
        'mkdir -p {output.folder} '
        '&& '
        'gzip -dc {input.tarfile} '
        '| tar -xf - '
        '--strip-components=1 '
        '-C {output.folder} '


# Run hybpiper and compress the resuilts
rule hybpiper_pigz:
    input:
        Path(
            run_tmpdir,
            'assemble',
            '{sample}.tar'
            )
    output:
        Path(
            outdir,
            'assemble',
            '{sample}.tar.gz'
            )
    resources:
        time = lambda wildcards, attempt: 10 * attempt,
    threads:
        4
    container:
        pigz
    shell:
        'pigz -p {threads} -9 > {output} < {input} '

rule hybpiper_assemble:
    input:
        unpack(get_sample_input),
        target = fixed_tf
    output:
        tarfile = temp(
            Path(
                run_tmpdir,
                'assemble',
                '{sample}.tar'
                )
            )
    params:
        resolve_input,
        resolve_output
    log:
        hybpiper = Path(
            logdir,
            'assemble',
            '{sample}.log').resolve()
    benchmark:
        Path(
            logdir,
            'assemble',
            'benchmark.{sample}.log').resolve()
    threads:
        lambda wildcards, attempt: 16 * attempt,
    resources:
        time = lambda wildcards, attempt: 120 * attempt,
        mem_mb=24000
    container:
        hybpiper
    shell:
        'workdir=$( mktemp -d ) '
        '; '
        'cd $workdir '
        '; '
        # hybpiper chokes on empty fastq files. Only add unpaired if it has reads
        # in it.
        'unpaired_arg="" '
        '&& '
        'if [ -s {params[0][unpaired]} ]; then unpaired_arg="--unpaired {params[0][unpaired]} "; fi '
        '&& '
        'hybpiper assemble '
        '--readfiles {params[0][r1]} {params[0][r2]} '
        '$unpaired_arg'
        '--targetfile_dna {params[0][target]} '
        '--diamond '
        '--cpu {threads} '
        '--prefix {wildcards.sample} '
        '&> {log.hybpiper} '
        # the amount of temp files chew through scratch quota
        # try to output to a tar.gz
        '; '
        'tar -cv {wildcards.sample} >> {params[1][tarfile]} '
        '2>> {log.hybpiper} '

# fix the targetfile
rule hybpiper_fix_targetfile:
    input:
        target = target_file,
        ctl = temp(
            Path(
                run_tmpdir,
                'check',
                'fix_targetfile.ctl'
                )
            )
    output:
        target_out = fixed_tf,
        report = Path(
            logdir,
            'target_file_report.txt'
            )
    params:
        resolve_input,
        resolve_output
    log:
        Path(
            logdir,
            'fix_targetfile.log').resolve()
    benchmark:
        Path(
            logdir,
            'fix_targetfile.benchmark.log').resolve()
    threads:
        1
    resources:
        time = lambda wildcards, attempt: 10 * attempt,
        mem_mb = lambda wildcards, attempt: 1000 * attempt
    container:
        hybpiper
    shell:
        'workdir=$( mktemp -d ) '
        '; '
        'cd $workdir '
        '; '
        'ln -s {params[0][target]} ./target_file.fasta '
        '&& '
        'hybpiper fix_targetfile '
        '--targetfile_dna target_file.fasta '
        '--allow_gene_removal '
        '{params[0][ctl]} '
        '&> {log} '
        '&& '
        'cp target_file_fixed.fasta {params[1][target_out]} '
        '&& '
        'cp fix_targetfile_report.tsv {params[1][report]} '

rule hybpiper_check_targetfile:
    input:
        target = target_file
    output:
        ctl = temp(
            Path(
                run_tmpdir,
                'check',
                'fix_targetfile.ctl'
                )
            )
    params:
        resolve_input,
        resolve_output
    log:
        Path(
            logdir,
            'check_targetfile.log').resolve()
    benchmark:
        Path(
            logdir,
            'check_targetfile.benchmark.log').resolve()
    threads:
        1
    resources:
        time = lambda wildcards, attempt: 10 * attempt,
        mem_mb = lambda wildcards, attempt: 1000 * attempt
    container:
        hybpiper
    shell:
        'workdir=$( mktemp -d ) '
        '; '
        'cd $workdir '
        '; '
        'hybpiper check_targetfile '
        '--targetfile_dna {params[0][target]} '
        '&> {log} '
        '&& '
        'cp *.ctl {params[1][ctl]} '

# prepare for hybpiper
rule generate_namelist:
    output:
        namelist
    run:
        with open(output[0], 'wt') as f:
            f.write("\n".join(all_samples))
