#!/usr/bin/env python3

from snakemake.logging import logger
import re


def get_collect_input(wildcards):
    if wildcards.type == "genome":
        return query_genome
    if wildcards.type == "proteins":
        return proteins
    else:
        raise ValueError(f"wtf {wildcards.type}")


def get_mapped_read_count(wildcards):
    count_file = checkpoints.count_reads_in_bamfile.get(**wildcards).output[0]
    logger.info(f"Counting mapped reads")
    with open(count_file, "rt") as f:
        read_count = int(f.read())
    if read_count == 0:
        logger.error(
            """
There are no mapped reads in bamfile.
This will cause GeneMark-ETP to crash.
Re-run the module without the bamfile.
        """
        )
    else:
        return count_file


###########
# GLOBALS #
###########

# containers
bbmap = "docker://quay.io/biocontainers/bbmap:39.01--h92535d8_1"
braker3 = "docker://teambraker/braker3:v1.0.6"
samtools = "docker://quay.io/biocontainers/samtools:1.18--h50ea8bc_1"

# set up directories
outdir = Path(config["outdir"] if "outdir" in config else ".")
logger.debug(f"outdir: {outdir}")
logdir = Path(outdir, "logs")
benchdir = Path(logdir, "benchmarks")

# catch input
query_genome = config["query_genome"]
logger.info(f"braker3: input genome {query_genome}")

# set up input for braker3
braker_dict = {"ref": Path(outdir, "genome.fa")}
params_dict = {"ref": f'--genome={Path(braker_dict["ref"]).resolve()}'}

# optional input
# check for proteins fasta
params_dict["proteins"] = ""
try:
    proteins = config["proteins"]
    braker_dict["proteins"] = Path(outdir, "proteins.fa")
    params_dict[
        "proteins"
    ] = f'--prot_seq={Path(braker_dict["proteins"]).resolve()}'
except KeyError:
    logger.info("braker3: no protein input")


# Check for RNAseq data
use_rnaseq = False
params_dict["rnaseq"] = ""
try:
    rnaseq = config["rnaseq"]
    read_counts_ok = Path(logdir, "check_read_count.done")
    braker_dict["rnaseq"] = rnaseq
    braker_dict["read_counts_ok"] = read_counts_ok
    params_dict["rnaseq"] = f'--bam={Path(braker_dict["rnaseq"]).resolve()}'
    use_rnaseq = True
except KeyError:
    logger.info("braker3: no rnaseq input")


# check for a user-defined species name
params_dict["species"] = ""
try:
    species_name = config["species_name"]
    params_dict["species"] = f"--species={species_name}"
except KeyError:
    logger.info("braker3: using default species name")

logger.debug(braker_dict)
logger.debug(params_dict)

outfiles = [
    "braker.aa",
    "braker.codingseq",
    "braker.gff3",
    "hintsfile.gff",
]


#########
# RULES #
#########


wildcard_constraints:
    outfile="|".join([re.escape(x) for x in outfiles]),


rule target:
    input:
        expand(
            Path(outdir, "{outfile}"),
            outfile=outfiles,
        ),


rule collect_output:
    input:
        Path(outdir, "braker", "{outfile}"),
    output:
        Path(outdir, "{outfile}"),
    threads: 1
    shell:
        "mv {input} {output}"


# braker3
# n.b. you have to cd to wd, otherwise braker overwrites the input file
rule braker3:
    input:
        **braker_dict,
    output:
        expand(
            Path(outdir, "braker", "{outfile}"),
            outfile=[
                "braker.aa",
                "braker.codingseq",
                "braker.gff3",
                "hintsfile.gff",
            ],
        ),
    params:
        **params_dict,
        wd=Path(outdir),
    log:
        Path(logdir, "braker3.log").resolve(),
    benchmark:
        Path(benchdir, "braker3.txt").resolve()
    threads: lambda wildcards, attempt: 20 * attempt
    resources:
        time=lambda wildcards, attempt: 10080 * attempt,
        mem_mb=lambda wildcards, attempt: 24e3 * attempt,
    container:
        braker3
    shell:
        "cd {params.wd} || exit 1 && "
        "braker.pl "
        "{params.ref} "
        "--gff3 "
        "--threads {threads} "
        "{params.proteins} "
        "{params.rnaseq} "
        "{params.species} "
        "&> {log}"


#################
# collect input #
#################


# Make sure there are mapped reads in the bamfile. If there are no mapped reads,
# braker3 will try to run GeneMark-ETP, which will crash.
if use_rnaseq:

    rule check_read_count:
        input:
            get_mapped_read_count,
        output:
            temp(touch(read_counts_ok)),

    checkpoint count_reads_in_bamfile:
        input:
            rnaseq,
        output:
            Path(logdir, "count_reads_in_bamfile.mapped_reads.txt"),
        log:
            Path(logdir, "count_reads_in_bamfile.log"),
        container:
            samtools
        shell:
            "samtools view -F4 -c {input} > {output} 2> {log}"


# n.b. whitespace in the header breaks braker
rule reformat:
    input:
        get_collect_input,
    output:
        temp(Path(outdir, "{type}.fa")),
    params:
        ignorejunk=lambda wildcards: "t"
        if wildcards.type == "proteins"
        else "f",
    log:
        Path(logdir, "reformat.{type}.log"),
    container:
        bbmap
    shell:
        "reformat.sh "
        "fixheaders=t "
        "trimreaddescription=t "
        "ignorejunk={params.ignorejunk} "
        "in={input} "
        "out={output} "
        "2>{log}"
