#!/usr/bin/env python3

import tempfile

bbmap = "docker://quay.io/biocontainers/bbmap:39.01--h92535d8_1"

# this is the path to the included adaptors file in bbmap
bbmap_adaptors = Path(
    "/usr", "local", "opt", "bbmap-39.01-1", "resources", "adapters.fa"
)

# set up directories
outdir = Path(config["outdir"] if "outdir" in config else ".")
logger.debug(f"outdir: {outdir}")
logdir = Path(outdir, "logs")
rnaseq = Path(config["bamfile"])

# set up a temporary directory for this run
try:
    run_tmpdir = config["run_tmpdir"]
    logger.info(f"Caught run_tmpdir {run_tmpdir}")
except KeyError as e:
    logger.info(f"{e} not set in config")
    run_tmpdir = tempfile.mkdtemp()
    logger.info(f"Setting run_tmpdir to {run_tmpdir}")
    logger.warning("This probably won't work on a cluster!")


rule target:
    input:
        r1=Path(outdir, "reads.trimmed.r1.fq.gz"),
        r2=Path(outdir, "reads.trimmed.r2.fq.gz"),


rule split:
    input:
        Path(run_tmpdir, "reads.trimmed.paired.fq"),
    output:
        r1=Path(outdir, "reads.trimmed.r1.fq.gz"),
        r2=Path(outdir, "reads.trimmed.r2.fq.gz"),
    log:
        Path(logdir, "split.log"),
    threads: 1
    resources:
        time=lambda wildcards, attempt: 10 * attempt,
        mem_mb=lambda wildcards, attempt: 2e3 * attempt,
    container:
        bbmap
    shell:
        "reformat.sh "
        "-Xmx{resources.mem_mb}m "
        "-Xms100m "
        "in=stdin.fastq "
        "int=t "
        "addcolon=t "
        "zl=9 "
        "out={output.r1} "
        "out2={output.r2} "
        "< {input} "
        "2> {log}"


rule trim:
    input:
        reads=Path(run_tmpdir, "reads.{type}.fq"),
    output:
        pipe=pipe(Path(run_tmpdir, "reads.trimmed.{type}.fq")),
    params:
        interleaved=lambda wildcards: "t"
        if wildcards.type == "paired"
        else "f",
        adaptors=bbmap_adaptors,
    log:
        log=Path(logdir, "trim.{type}.log"),
        stats=Path(logdir, "trim.{type}.stats.txt"),
    threads: 2
    resources:
        time=lambda wildcards, attempt: 10 * attempt,
        mem_mb=lambda wildcards, attempt: 2e3 * attempt,
    container:
        bbmap
    shell:
        "bbduk.sh "
        "-Xmx{resources.mem_mb}m "
        "-Xms100m "
        "threads={threads} "
        "in={input.reads} "
        "int={params.interleaved} "
        "out=stdout.fastq "
        "outs=/dev/null "
        "ref={params.adaptors} "
        "ktrim=r k=23 mink=11 hdist=1 tpe tbo "
        "forcetrimmod=5 "
        "stats={log.stats} "
        ">> {output.pipe} "
        "2> {log.log} "


rule repair:
    input:
        Path(run_tmpdir, "reads.fq"),
    output:
        out=pipe(Path(run_tmpdir, "reads.paired.fq")),
        outs=temp(Path(run_tmpdir, "reads.unpaired.fq")),
    log:
        Path(logdir, "repair.log"),
    threads: 1
    resources:
        time=lambda wildcards, attempt: 10 * attempt,
        mem_mb=lambda wildcards, attempt: 4e3 * attempt,
    container:
        bbmap
    shell:
        "repair.sh "
        "-Xmx{resources.mem_mb}m "
        "-Xms100m "
        "in=stdin.fastq "
        "int=t "
        "out=stdout.fastq "
        "outs={output.outs} "
        "repair=t "
        "tossbrokenreads=t "
        "tossjunk=t "
        "< {input} "
        ">> {output.out} "
        "2> {log}"


rule bam2fastq:
    input:
        rnaseq,
    output:
        pipe=pipe(Path(run_tmpdir, "reads.fq")),
    log:
        Path(logdir, "bam2fastq.log"),
    threads: 1
    resources:
        time=lambda wildcards, attempt: 10 * attempt,
        mem_mb=lambda wildcards, attempt: 4e3 * attempt,
    container:
        bbmap
    shell:
        "reformat.sh "
        "-Xmx{resources.mem_mb}m "
        "-Xms100m "
        "in={input} "
        "out=stdout.fq "
        "trimrname=t "
        "tossjunk=t "
        "primaryonly=t "
        ">> {output.pipe} "
        "2> {log}"
