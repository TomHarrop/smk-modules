#!/usr/bin/env python3

import tempfile
from snakemake.logging import logger


def collect_input(wildcards):
    if wildcards.file == "genome":
        return query_genome
    elif wildcards.file == "proteins":
        return proteins
    else:
        raise ValueError(f"wtf {wildcards.file}")


###########
# GLOBALS #
###########

# containers
bbmap = "docker://quay.io/biocontainers/bbmap:39.01--h92535d8_1"
braker3 = "docker://teambraker/braker3:v.1.0.4"
eggnog = "docker://quay.io/biocontainers/eggnog-mapper:2.1.12--pyhdfd78af_0"
funannotate = "docker://ghcr.io/tomharrop/container-funannotate:1.8.15_cv2"
interproscan = (
    "docker://quay.io/biocontainers/interproscan:5.59_91.0--hec16e2b_1"
)
seqkit = "docker://quay.io/biocontainers/seqkit:2.5.1--h9ee0642_0"


# this is the path to the included adaptors file in bbmap
bbmap_adaptors = Path(
    "/usr", "local", "opt", "bbmap-39.01-1", "resources", "adapters.fa"
)

# set up a temporary directory for this run
try:
    run_tmpdir = config["run_tmpdir"]
    logger.info(f"Caught run_tmpdir {run_tmpdir}")
except KeyError as e:
    logger.info(f"{e} not set in config")
    run_tmpdir = tempfile.mkdtemp()
    logger.info(f"Setting run_tmpdir to {run_tmpdir}")
    logger.warning("This probably won't work on a cluster!")

# set up directories
outdir = Path(config["outdir"] if "outdir" in config else ".")
logger.debug(f"outdir: {outdir}")
logdir = Path(outdir, "logs")
benchdir = Path(logdir, "benchmarks")

# catch input
# proteins = config["proteins"]
query_genome = config["query_genome"]
rnaseq_r1 = config["rnaseq_r1"]
rnaseq_r2 = config["rnaseq_r2"]
species_name = config["species_name"]
db_path = config["db_path"]
dmnd_db = config["dmnd_db"]
eggnog_db = config["eggnog_db"]


logger.info(f"Annotating query_genome {query_genome}")

#########
# RULES #
#########


rule target:
    input:
        Path(
            outdir,
            "funannotate",
            "annotate_results",
            f"{species_name}.annotations.txt",
        ),


rule annotate:
    input:
        gff=Path(
            outdir,
            "funannotate",
            "predict_results",
            f"{species_name}.gff3",
        ),
        # ipr=Path(outdir, "interproscan", f"{species_name}.proteins.fa.xml"),
        eggnog=Path(outdir, "eggnog", "eggnog.emapper.annotations"),
        db=db_path,
    output:
        annotations=Path(
            outdir,
            "funannotate",
            "annotate_results",
            f"{species_name}.annotations.txt",
        ),
        transcripts=Path(
            outdir,
            "funannotate",
            "annotate_results",
            f"{species_name}.mrna-transcripts.fa",
        ),
    params:
        indir=lambda wildcards, input: Path(input.gff).parent.resolve(),
        # ipr=lambda wildcards, input: Path(input.ipr).resolve(),
        eggnog=lambda wildcards, input: Path(input.eggnog).resolve(),
        db=lambda wildcards, input: Path(input.db).resolve(),
        wd=lambda wildcards, output: Path(
            output.annotations
        ).parent.parent.resolve(),
    log:
        Path(logdir, "funannotate_annotate.log").resolve(),
    threads: workflow.cores
    container:
        funannotate
    shell:
        "export AUGUSTUS_CONFIG_PATH=/usr/local/config ; "
        "funannotate annotate "
        "--input {params.indir} "
        "--eggnog {params.eggnog} "
        # "--iprscan {params.ipr} "
        "--out {params.wd} "
        f'--species "{species_name}" '
        "--database {params.db} "
        "--cpus {threads} "
        "&> {log}"


# currently not working. need to download the interproscan DB and add
# instructions to test-data/funannotate/README.md. Then need to pass that from
# the test-workflow to this module. Then need to use the db in this rule by
# passing it to set_up_interproscan.sh. set_up_interproscan.sh is not finished.
rule interproscan:
    input:
        proteins=Path(
            outdir,
            "funannotate",
            "predict_results",
            f"{species_name}.proteins.fa",
        ),
    output:
        annotations=Path(
            outdir, "interproscan", f"{species_name}.proteins.fa.xml"
        ),
    params:
        wd=lambda wildcards, output: Path(output.annotations).parent,
    log:
        Path(logdir, "interproscan.log"),
    threads: workflow.cores
    container:
        interproscan
    shell:
        "interproscan.sh "
        "-dp "
        "-i {input} "
        f"--tempdir {run_tmpdir} "
        "--output-dir {params.wd} "
        "--cpu {threads} "
        "&> {log}"


rule eggnog_mapper:
    input:
        proteins=Path(
            outdir,
            "funannotate",
            "predict_results",
            f"{species_name}.proteins.fa",
        ),
        dmnd_db=dmnd_db,
        eggnog_db=eggnog_db,
    output:
        annotations=Path(outdir, "eggnog", "eggnog.emapper.annotations"),
    params:
        proteins=lambda wildcards, input: Path(input.proteins).resolve(),
        wd=lambda wildcards, output: Path(output.annotations).parent.resolve(),
        dmnd_db=lambda wildcards, input: Path(input.dmnd_db).resolve(),
        db_path=lambda wildcards, input: Path(input.eggnog_db).parent.resolve(),
    log:
        Path(logdir, "eggnog_mapper.log").resolve(),
    threads: workflow.cores
    container:
        eggnog
    shell:
        "cd {params.wd} || exit 1 ; "
        "emapper.py "
        "-m diamond "
        "-i {params.proteins} "
        "-o eggnog "
        "--dmnd_db {params.dmnd_db} "
        "--data_dir {params.db_path} "
        "--cpu {threads} "
        "&> {log}"


# this doesn't work with containall, writable-tmps and cleanenv.
rule predict:
    input:
        Path(
            outdir,
            "funannotate",
            "training",
            "funannotate_train.transcripts.gff3",
        ),
        fasta=Path(run_tmpdir, "genome.fa"),
        db=db_path,
    output:
        gff=Path(
            outdir,
            "funannotate",
            "predict_results",
            f"{species_name}.gff3",
        ),
        transcripts=Path(
            outdir,
            "funannotate",
            "predict_results",
            f"{species_name}.mrna-transcripts.fa",
        ),
        proteins=Path(
            outdir,
            "funannotate",
            "predict_results",
            f"{species_name}.proteins.fa",
        ),
    params:
        fasta=lambda wildcards, input: Path(input.fasta).resolve(),
        db=lambda wildcards, input: Path(input.db).resolve(),
        wd=lambda wildcards, output: Path(output.gff).parent.parent.resolve(),
        min_training_models=100,  # for test data
    log:
        Path(logdir, "funannotate_predict.log").resolve(),
    threads: workflow.cores
    container:
        funannotate
    shell:
        # TODO: add EVM_HOME and AUGUSTUS_CONFIG_PATH to the docker container
        # TODO: when do we use the following params?
        # "--augustus_species lbonariensis "
        # "--busco_seed_species tribolium2012 "
        # "--busco_db endopterygota "
        "cp /usr/local/opt/genemark/gm_key_64 ${{HOME}}/.gm_key ; "
        "export EVM_HOME=/usr/local/opt/evidencemodeler-1.1.1 ; "
        "funannotate predict "
        "--EVM_HOME /usr/local/opt/evidencemodeler-1.1.1 "
        "--AUGUSTUS_CONFIG_PATH /usr/local/config "
        "--input {params.fasta} "
        "--out {params.wd} "
        f'--species "{species_name}" '
        "--database {params.db} "
        "--cpus {threads} "
        "--optimize_augustus "
        "--organism other "
        "--repeats2evm "
        "--max_intronlen 50000 "
        "--min_training_models {params.min_training_models} "
        "&> {log}"


rule train:
    input:
        fasta=Path(run_tmpdir, "genome.fa"),
        left=rnaseq_r1,
        right=rnaseq_r2,
    output:
        gff=Path(
            outdir,
            "funannotate",
            "training",
            "funannotate_train.transcripts.gff3",
        ),
    params:
        fasta=lambda wildcards, input: Path(input.fasta).resolve(),
        wd=lambda wildcards, output: Path(output.gff).parent.parent.resolve(),
    log:
        Path(logdir, "funannotate_train.log").resolve(),
    threads: workflow.cores
    container:
        funannotate
    shell:
        # TODO: add PASAHOME and TRINITYHOME to the docker container
        "cp /usr/local/opt/genemark/gm_key_64 ${{HOME}}/.gm_key ; "
        "funannotate train "
        "--PASAHOME /usr/local/opt/pasa-2.5.2 "
        "--TRINITYHOME /usr/local/opt/trinity-2.8.5 "
        "--input {params.fasta} "
        "--out {params.wd} "
        "--left {input.left} "
        "--right {input.right} "
        "--stranded RF "
        "--max_intronlen 10000 "
        f'--species "{species_name}" '
        "--cpus {threads} "
        " &> {log}"


rule reformat:
    input:
        collect_input,
    output:
        temp(Path(run_tmpdir, "{file}.fa")),
    log:
        Path(logdir, "reformat.{file}.log"),
    container:
        bbmap
    shell:
        "reformat.sh in={input} out={output} 2>{log}"
