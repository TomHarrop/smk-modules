#!/usr/bin/env python3

from pathlib import Path
from snakemake.logging import logger
import tempfile


def collect_input(wildcards):
    if wildcards.file == "genome":
        return query_genome
    elif wildcards.file == "proteins":
        return proteins
    else:
        raise ValueError(f"wtf {wildcards.file}")


###########
# GLOBALS #
###########

# containers
bbmap = "docker://quay.io/biocontainers/bbmap:39.01--h92535d8_1"
braker3 = "docker://teambraker/braker3:v.1.0.4"
eggnog = "docker://quay.io/biocontainers/eggnog-mapper:2.1.12--pyhdfd78af_0"
funannotate = "docker://ghcr.io/tomharrop/container-funannotate:1.8.15_cv4"
seqkit = "docker://quay.io/biocontainers/seqkit:2.5.1--h9ee0642_0"

# this is the path to the included adaptors file in bbmap
bbmap_adaptors = Path(
    "/usr", "local", "opt", "bbmap-39.01-1", "resources", "adapters.fa"
)

# set up a temporary directory for this run
try:
    run_tmpdir = config["run_tmpdir"]
    logger.info(f"Caught run_tmpdir {run_tmpdir}")
except KeyError as e:
    logger.info(f"{e} not set in config")
    run_tmpdir = tempfile.mkdtemp()
    logger.info(f"Setting run_tmpdir to {run_tmpdir}")
    logger.warning("This probably won't work on a cluster!")

# set up directories
outdir = Path(config["outdir"] if "outdir" in config else ".")
logger.debug(f"outdir: {outdir}")
logdir = Path(outdir, "logs")
benchdir = Path(logdir, "benchmarks")

# catch input
query_genome = config["query_genome"]
species_name = config["species_name"]
db_path = config["db_path"]
dmnd_db = config["dmnd_db"]
eggnog_db = config["eggnog_db"]
busco_seed_species = config["busco_seed_species"]
busco_db = config["busco_db"]

# optional inputs
predict_evidence = {}
predict_params = {
    "min_training_models": 200,  # default
    "protein_evidence": "",
    "transcript_evidence": "",
}

# params
try:
    predict_params["min_training_models"] = config["min_training_models"]
except KeyError as e:
    logger.info(
        f'min_training_models not given, using {predict_params["min_training_models"]}'
    )

# do we have RNAseq?
use_rnaseq = False
try:
    rnaseq_r1 = config["rnaseq_r1"]
    rnaseq_r2 = config["rnaseq_r2"]
    use_rnaseq = True
    predict_evidence["rnaseq"] = Path(
        outdir,
        "funannotate",
        "training",
        "funannotate_train.transcripts.gff3",
    )
except KeyError as e:
    logger.warning(
        """
###############################################
# No RNA-seq data. Skipping funannotate train #
###############################################
"""
    )


# do we have transcript / protein evidence?
try:
    protein_evidence = config["protein_evidence"]
    predict_evidence["protein_evidence"] = Path(
        protein_evidence.resolve().as_posix()
    )
    predict_params[
        "protein_evidence"
    ] = f'--protein_evidence {predict_evidence["protein_evidence"]} '
except KeyError as e:
    logger.info("No protein evidence provided, skipping")

try:
    transcript_evidence = config["transcript_evidence"]
    predict_evidence["transcript_evidence"] = Path(
        transcript_evidence.resolve().as_posix()
    )
    predict_params[
        "transcript_evidence"
    ] = f'--transcript_evidence {predict_evidence["transcript_evidence"]} '
except KeyError as e:
    logger.info("No transcript evidence provided, skipping")

# deal with the genemark key
gm_key = {}
try:
    gm_key["gm_key"] = Path(config["gm_key"].resolve().as_posix())
except KeyError as e:
    logger.warning(
        """
#########################################################
# Provide your genemark key with the gm_key config key. #
#########################################################
"""
    )
    # there's a key here in the container, but it will expire
    gm_key["gm_key"] = "/usr/local/opt/genemark/gm_key_64"


# decide if we're running interproscan
annotate_input = {
    "gff": Path(
        outdir,
        "funannotate",
        "predict_results",
        f"{species_name}.gff3",
    ),
    "eggnog": Path(outdir, "eggnog", "eggnog.emapper.annotations"),
    "db": db_path,
}
interproscan = None
ipr_param = {"ipr": ""}

try:
    interproscan_container = config["interproscan_container"]
    if interproscan_container is False:
        logger.warning(
            """
#########################
# Interproscan disabled #
#########################
"""
        )
    else:
        annotate_input["ipr"] = Path(
            outdir, "interproscan", f"{species_name}.proteins.fa.xml"
        )
        interproscan = (
            Path(config["interproscan_container"]).resolve().as_posix()
        )
        ipr_param["ipr"] = f'--iprscan {Path(annotate_input["ipr"]).resolve()}'
except KeyError as e:
    logger.error(
        """
################################################################################
No interproscan container was provided. Because the container is approximately
14 GB with all the required databases, it's not hosted anywhere. Provide the
path or URL to the container with the interproscan_container config key.

If you want to disable interproscan, set interproscan_container to False.
################################################################################
        """
    )
    raise e

logger.info(f"Annotating query_genome {query_genome}")

#########
# RULES #
#########


rule target:
    input:
        Path(
            outdir,
            "funannotate",
            "annotate_results",
            f"{species_name}.annotations.txt",
        ),


rule annotate:
    input:
        **annotate_input,
    output:
        annotations=Path(
            outdir,
            "funannotate",
            "annotate_results",
            f"{species_name}.annotations.txt",
        ),
        transcripts=Path(
            outdir,
            "funannotate",
            "annotate_results",
            f"{species_name}.mrna-transcripts.fa",
        ),
    params:
        **ipr_param,
        indir=lambda wildcards, input: Path(input.gff).parent.resolve(),
        eggnog=lambda wildcards, input: Path(input.eggnog).resolve(),
        db=lambda wildcards, input: Path(input.db).resolve(),
        wd=lambda wildcards, output: Path(
            output.annotations
        ).parent.parent.resolve(),
    log:
        Path(logdir, "funannotate_annotate.log").resolve(),
    threads: workflow.cores
    container:
        funannotate
    shell:
        "export FUNANNOTATE_DB={params.db} ; "
        "funannotate annotate "
        "--input {params.indir} "
        "{params.ipr} "
        "--eggnog {params.eggnog} "
        "--out {params.wd} "
        f'--species "{species_name}" '
        "--database {params.db} "
        "--cpus {threads} "
        "&> {log}"


# The interproscan rule works, but the container is 18 GB so it can't be hosted
# anywhere.
rule interproscan:
    input:
        proteins=Path(
            outdir,
            "funannotate",
            "predict_results",
            f"{species_name}.proteins.fa",
        ),
    output:
        annotations=Path(
            outdir, "interproscan", f"{species_name}.proteins.fa.xml"
        ),
    params:
        wd=lambda wildcards, output: Path(output.annotations).parent,
    log:
        Path(logdir, "interproscan.log"),
    threads: workflow.cores
    container:
        interproscan
    shell:
        "interproscan.sh "
        "-dp "
        "-i {input} "
        f"--tempdir {run_tmpdir} "
        "--output-dir {params.wd} "
        "--cpu {threads} "
        "&> {log}"


rule eggnog_mapper:
    input:
        proteins=Path(
            outdir,
            "funannotate",
            "predict_results",
            f"{species_name}.proteins.fa",
        ),
        dmnd_db=dmnd_db,
        eggnog_db=eggnog_db,
    output:
        annotations=Path(outdir, "eggnog", "eggnog.emapper.annotations"),
    params:
        proteins=lambda wildcards, input: Path(input.proteins).resolve(),
        wd=lambda wildcards, output: Path(output.annotations).parent.resolve(),
        dmnd_db=lambda wildcards, input: Path(input.dmnd_db).resolve(),
        db_path=lambda wildcards, input: Path(input.eggnog_db).parent.resolve(),
    log:
        Path(logdir, "eggnog_mapper.log").resolve(),
    threads: workflow.cores
    container:
        eggnog
    shell:
        "cd {params.wd} || exit 1 ; "
        "emapper.py "
        "-m diamond "
        "-i {params.proteins} "
        "-o eggnog "
        "--dmnd_db {params.dmnd_db} "
        "--data_dir {params.db_path} "
        "--cpu {threads} "
        "&> {log}"


# this doesn't work with containall, writable-tmps and cleanenv.
rule predict:
    input:
        **predict_evidence,
        fasta=Path(run_tmpdir, "genome.fa"),
        db=db_path,
        gm_key=Path(run_tmpdir, "gm_key"),
    output:
        gff=Path(
            outdir,
            "funannotate",
            "predict_results",
            f"{species_name}.gff3",
        ),
        transcripts=Path(
            outdir,
            "funannotate",
            "predict_results",
            f"{species_name}.mrna-transcripts.fa",
        ),
        proteins=Path(
            outdir,
            "funannotate",
            "predict_results",
            f"{species_name}.proteins.fa",
        ),
    params:
        **predict_params,
        fasta=lambda wildcards, input: Path(input.fasta).resolve(),
        db=lambda wildcards, input: Path(input.db).resolve(),
        wd=lambda wildcards, output: Path(output.gff).parent.parent.resolve(),
    log:
        Path(logdir, "funannotate_predict.log").resolve(),
    threads: workflow.cores
    container:
        funannotate
    shell:
        "export FUNANNOTATE_DB={params.db} ; "
        "cp {input.gm_key} ${{HOME}}/.gm_key ; "
        "funannotate predict "
        "--input {params.fasta} "
        "--out {params.wd} "
        f'--species "{species_name}" '
        f'--busco_seed_species "{busco_seed_species}" '
        f"--busco_db {busco_db} "
        "--database {params.db} "
        "--cpus {threads} "
        "--optimize_augustus "
        "--organism other "
        "--repeats2evm "
        "--max_intronlen 50000 "
        "--min_training_models {params.min_training_models} "
        "{params.protein_evidence} "
        "{params.transcript_evidence} "
        "&> {log}"


if use_rnaseq:

    rule train:
        input:
            Path(run_tmpdir, "gm_key"),
            fasta=Path(run_tmpdir, "genome.fa"),
            left=rnaseq_r1,
            right=rnaseq_r2,
            gm_key=Path(run_tmpdir, "gm_key"),
        output:
            gff=Path(
                outdir,
                "funannotate",
                "training",
                "funannotate_train.transcripts.gff3",
            ),
        params:
            fasta=lambda wildcards, input: Path(input.fasta).resolve(),
            wd=lambda wildcards, output: Path(
                output.gff
            ).parent.parent.resolve(),
        log:
            Path(logdir, "funannotate_train.log").resolve(),
        threads: workflow.cores
        container:
            funannotate
        shell:
            "cp {input.gm_key} ${{HOME}}/.gm_key ; "
            "funannotate train "
            "--input {params.fasta} "
            "--out {params.wd} "
            "--left {input.left} "
            "--right {input.right} "
            "--stranded RF "
            "--max_intronlen 10000 "
            f'--species "{species_name}" '
            "--cpus {threads} "
            " &> {log}"


rule reformat:
    input:
        collect_input,
    output:
        temp(Path(run_tmpdir, "{file}.fa")),
    log:
        Path(logdir, "reformat.{file}.log"),
    container:
        bbmap
    shell:
        "reformat.sh in={input} out={output} 2>{log}"


rule collect_key:
    output:
        temporary(Path(run_tmpdir, "gm_key")),
    params:
        **gm_key,
    container:
        funannotate
    shell:
        "cp {params.gm_key} {output}"
