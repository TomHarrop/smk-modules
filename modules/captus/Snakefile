from functools import cache
from snakemake.logging import logger
import re
import shutil
import tempfile


#############
# FUNCTIONS #
#############


def format_outgroup(wildcards):
    try:
        outgroup = ",".join(config["outgroup"])
    except KeyError:
        logger.debug("No outgroup specified")
        return ""
    logger.debug(f"Setting outgroup to {outgroup}")
    return f"--outgroup {outgroup}"


def get_extract_asms(wildcards):
    all_samples = get_sample_list(wildcards)
    sample_files = expand(
        Path("05_extract-input", "{sample}__captus-asm"),
        sample=all_samples,
    )
    return [Path(outdir, x) for x in sample_files]


def get_sample_list(wildcards):
    namelist_file = checkpoints.collect_namelist.get(**wildcards).output[0]
    return read_namelist(namelist_file)


@cache
def read_namelist(namelist):
    with open(namelist, "rt") as f:
        return sorted(set(x.rstrip("\n") for x in f.readlines()))


###########
# GLOBALS #
###########

# containers
captus = "docker://quay.io/biocontainers/captus:1.0.1--pyhdfd78af_2"
python = "docker://python:3.10.14"

# set up directories
outdir = Path(config["outdir"] if "outdir" in config else ".")
logger.debug(f"outdir: {outdir}")
logdir = Path(outdir, "logs")

# catch samples and
namelist = config["namelist"]
logger.debug(f"Caught namelist: {namelist}")

# catch read directory
read_directory = Path(config["read_directory"])
logger.debug(f"Caught read_directory: {read_directory}")

# catch target_file
target_file = Path(config["target_file"])
logger.debug(f"Caught target_file: {target_file}")

# Captus translates the target file silently but writes it next to the input,
# so we can't pick it up as ouput from a shadow rule.
translated_targets = target_file.with_suffix(".captus.faa")


#########
# RULES #
#########


rule target:
    input:
        Path(outdir, "04_alignments"),
        Path(outdir, "captus-assembly_extract.refs.json.fixed"),


rule align:
    input:
        fixed_refs=Path(outdir, "captus-assembly_extract.refs.json.fixed"),
        input_directory=Path(outdir, "03_extractions"),
    output:
        outdir=directory(Path(outdir, "04_alignments")),
    params:
        outgroup=format_outgroup,
    log:
        Path(logdir, "align.log"),
    benchmark:
        Path(logdir, "benchmark.align.log")
    threads: lambda wildcards, attempt: 16 * attempt
    resources:
        time=lambda wildcards, attempt: 120 * attempt,
        mem_mb=lambda wildcards, attempt: int(16e3 * attempt),
    shadow:
        "minimal"
    container:
        captus
    shell:
        "cp $( readlink -f {input.fixed_refs} ) "
        "{input.input_directory}/captus-assembly_extract.refs.json ; "
        "captus_assembly align "
        "--captus_extractions_dir {input.input_directory}/ "
        "--out {output.outdir} "
        '--ram "$(( {resources.mem_mb}/1000 ))" '
        "--threads {threads} "
        "{params.outgroup} "
        "&> {log}"


rule replace_temporary_paths:
    input:
        tmp_json_path=Path(outdir, "captus-assembly_extract.refs.json"),
        extraction_dir=Path(outdir, "03_extractions"),
    output:
        fixed_json=Path(outdir, "captus-assembly_extract.refs.json.fixed"),
    log:
        Path(logdir, "replace_temporary_paths.log"),
    container:
        python
    script:
        "scripts/replace_temporary_paths.py"


rule extract:
    input:
        asms=get_extract_asms,
        target_file=target_file,
    output:
        outdir=directory(Path(outdir, "03_extractions")),
        refs_json=Path(outdir, "captus-assembly_extract.refs.json"),
    params:
        asms=lambda wildcards, input: Path(input.asms[0]).parent,
    log:
        Path(logdir, "extract.log"),
    benchmark:
        Path(logdir, "benchmark.extract.log")
    threads: lambda wildcards, attempt: 16 * attempt
    resources:
        time=lambda wildcards, attempt: 120 * attempt,
        mem_mb=lambda wildcards, attempt: int(16e3 * attempt),
    shadow:
        "minimal"
    container:
        captus
    shell:
        "captus_assembly extract "
        "--captus_assemblies_dir {params.asms} "
        "--out {output.outdir}/. "
        "--nuc_refs {input.target_file} "
        "--mit_refs SeedPlantsMIT "
        "--ptd_refs SeedPlantsPTD "
        "--cluster_leftovers "
        "--mmseqs_method easy-cluster "
        '--ram "$(( {resources.mem_mb}/1000 ))" '
        "--threads {threads} "
        "&> {log} "
        "; mv {output.outdir}/captus-assembly_extract.refs.json "
        "{output.refs_json}"


rule collect_assemblies:
    input:
        Path(outdir, "02_assemblies", "{sample}", "{sample}__captus-asm"),
    output:
        temp(
            directory(
                Path(outdir, "05_extract-input", "{sample}__captus-asm")
            )
        ),
    shell:
        "ln -s "
        '"$( readlink -f {input} )" '
        '"$( readlink -f {output} )" '


rule assemble:
    input:
        r1=Path(outdir, "reads", "{sample}_R1.fastq.gz"),
        r2=Path(outdir, "reads", "{sample}_R2.fastq.gz"),
    output:
        outdir=directory(
            Path(outdir, "02_assemblies", "{sample}", "{sample}__captus-asm")
        ),
    shadow:
        "minimal"
    params:
        outdir=lambda wildcards, output: Path(output.outdir).parent,
    log:
        Path(logdir, "assemble", "{sample}.log"),
    benchmark:
        Path(logdir, "assemble", "benchmark.{sample}.log")
    threads: lambda wildcards, attempt: 16 * attempt
    resources:
        time=lambda wildcards, attempt: 120 * attempt,
        mem_mb=lambda wildcards, attempt: int(16e3 * attempt),
    container:
        captus
    shell:
        "captus_assembly assemble "
        "--reads {input.r1} {input.r2} "
        "--out {params.outdir} "
        '--tmp_dir "$( mktemp -d )" '
        '--ram "$(( {resources.mem_mb}/1000 ))" '
        "--threads {threads} "
        "&> {log}"


rule collect_reads:
    input:
        Path(read_directory, "{sample}.r{read}.fastq.gz"),
    output:
        temp(Path(outdir, "reads", "{sample}_R{read}.fastq.gz")),
    shell:
        "ln -s "
        '"$( readlink -f {input} )" '
        '"$( readlink -f {output} )" '


# This HAS to be a checkpoint. We need to read this file to know which samples
# we have.
checkpoint collect_namelist:
    input:
        namelist,
    output:
        Path(outdir, "namelist.captus.txt"),
    shell:
        "(cat {input} && echo) > {output}"
